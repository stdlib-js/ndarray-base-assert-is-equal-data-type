{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDataTypeString = require( '@stdlib/ndarray-base-assert-is-data-type-string' );\nvar isDataTypeObject = require( '@stdlib/ndarray-base-assert-is-data-type-object' );\nvar isStructDataType = require( '@stdlib/ndarray-base-assert-is-struct-data-type' );\n\n\n// MAIN //\n\n/**\n* Tests whether two values are equal ndarray data types.\n*\n* @param {*} v1 - first input value\n* @param {*} v2 - second input value\n* @returns {boolean} boolean indicating whether two input values are equal ndarray data types\n*\n* @example\n* var DataType = require( '@stdlib/ndarray-dtype-ctor' );\n*\n* var bool = isEqualDataType( 'binary', 'binary' );\n* // returns true\n*\n* bool = isEqualDataType( 'float32', 'float32' );\n* // returns true\n*\n* bool = isEqualDataType( 'float64', new DataType( 'float64' ) );\n* // returns true\n*\n* bool = isEqualDataType( 'generic', new DataType( 'generic' ) );\n* // returns true\n*\n* bool = isEqualDataType( 'int16', 'int32' );\n* // returns false\n*\n* bool = isEqualDataType( 'int32', new DataType( 'int16' ) );\n* // returns false\n*/\nfunction isEqualDataType( v1, v2 ) {\n\tif ( isDataTypeString( v1 ) ) {\n\t\t// Nothing to do here. Branch is kept to avoid additional assertion logic for what is expected to be a common use case; namely, comparing data type strings...\n\t} else if ( isDataTypeObject( v1 ) ) {\n\t\tv1 = String( v1 );\n\t} else if ( isStructDataType( v1 ) ) {\n\t\tv1 = v1.layout;\n\t} else {\n\t\treturn false;\n\t}\n\tif ( isDataTypeString( v2 ) ) {\n\t\t// Nothing to do here. Branch is kept to avoid additional assertion logic for what is expected to be a common use case; namely, comparing data type strings...\n\t} else if ( isDataTypeObject( v2 ) ) {\n\t\tv2 = String( v2 );\n\t} else if ( isStructDataType( v2 ) ) {\n\t\tv2 = v2.layout;\n\t} else {\n\t\treturn false;\n\t}\n\treturn ( v1 === v2 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isEqualDataType;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether two values are equal ndarray data types.\n*\n* @module @stdlib/ndarray-base-assert-is-equal-data-type\n*\n* @example\n* var DataType = require( '@stdlib/ndarray-dtype-ctor' );\n* var isEqualDataType = require( '@stdlib/ndarray-base-assert-is-equal-data-type' );\n*\n* var bool = isEqualDataType( 'binary', 'binary' );\n* // returns true\n*\n* bool = isEqualDataType( 'float32', 'float32' );\n* // returns true\n*\n* bool = isEqualDataType( 'float64', new DataType( 'float64' ) );\n* // returns true\n*\n* bool = isEqualDataType( 'generic', new DataType( 'generic' ) );\n* // returns true\n*\n* bool = isEqualDataType( 'int16', 'int32' );\n* // returns false\n*\n* bool = isEqualDataType( 'int32', new DataType( 'int16' ) );\n* // returns false\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iDAAkD,EAC9EC,EAAmB,QAAS,iDAAkD,EAC9EC,EAAmB,QAAS,iDAAkD,EAiClF,SAASC,EAAiBC,EAAIC,EAAK,CAClC,GAAK,CAAAL,EAAkBI,CAAG,EAEnB,GAAKH,EAAkBG,CAAG,EAChCA,EAAK,OAAQA,CAAG,UACLF,EAAkBE,CAAG,EAChCA,EAAKA,EAAG,WAER,OAAO,GAER,GAAK,CAAAJ,EAAkBK,CAAG,EAEnB,GAAKJ,EAAkBI,CAAG,EAChCA,EAAK,OAAQA,CAAG,UACLH,EAAkBG,CAAG,EAChCA,EAAKA,EAAG,WAER,OAAO,GAER,OAASD,IAAOC,CACjB,CAKAN,EAAO,QAAUI,IChCjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isDataTypeString", "isDataTypeObject", "isStructDataType", "isEqualDataType", "v1", "v2", "main"]
}
